manifest {
    name            = 'moqc'
    author          = 'Ira Cooke'
    homePage        = 'https://github.com/marine-omics/moqc'
    description     = 'Quality control and contaminant detection for marine sequencing data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version = '0.3'
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


profiles {

    test_pe {        
        params {
            params.krakendbs="${launchDir}/testdata/porites,${launchDir}/testdata/porites2"
            samples="${projectDir}/test/test_pe.csv"
            params.base_path="${projectDir}"
            outdir="${launchDir}/testout"
            max_cpus=2
            max_memory=4.GB
        }
    }

    test {
        params {
            params.krakendbs="${launchDir}/testdata/porites,${launchDir}/testdata/porites2"
            samples="${projectDir}/test/test.csv"
            params.base_path="${projectDir}"
            outdir="${launchDir}/testout"
            max_cpus=2
            max_memory=4.GB            
        }
    }

    test_pe_zodiac { 
        process.executor = 'pbspro'
        singularity.enabled = true
        singularity.autoMounts = true
        max_cpus=24
        max_memory=200.GB   
        ext.args='--preload-size 30G'    
        params {
            krakendbs="/scratch/ira/krakenuniq/coral_genomes,/scratch/ira/krakenuniq/symbiont_genomes,/scratch/ira/krakenuniq/euk_genomes,/scratch/ira/krakenuniq/coral_transcriptomes,/scratch/ira/krakenuniq/symbiont_transcriptomes,/scratch/ira/krakenuniq/kraken_standard"
            samples="${projectDir}/test/test_pe.csv"
            base_path="${projectDir}"
            outdir="${launchDir}/testout"
        }
    }


    standard {
        process.executor = 'local'
    }

    docker {
        process.executor = 'local'
        docker.enabled = true
    }

    singularity {
        process.executor = 'local'
        singularity.enabled = true
    }    

    zodiac {
        process.executor = 'pbspro'
        singularity.enabled = true
        singularity.autoMounts = true
        max_cpus=48
        max_memory=200.GB
        params {
            krakendbs="/scratch/ira/krakenuniq/coral_genomes,/scratch/ira/krakenuniq/symbiont_genomes,/scratch/ira/krakenuniq/euk_genomes,/scratch/ira/krakenuniq/coral_transcriptomes,/scratch/ira/krakenuniq/symbiont_transcriptomes,/scratch/ira/krakenuniq/kraken_standard"
            outdir="${launchDir}/moqc_out"
        }
    }


    genomics {
        process.executor = 'local'
        singularity.enabled = true
        singularity.autoMounts = true 
        max_cpus=64
        max_memory=600.GB
        params {
            krakendbs="/fast/shared/krakenuniq/coral_genomes,/fast/shared/krakenuniq/symbiont_genomes,/fast/shared/krakenuniq/euk_genomes,/fast/shared/krakenuniq/coral_transcriptomes,/fast/shared/krakenuniq/symbiont_transcriptomes,/fast/shared/krakenuniq/kraken_standard"
            outdir="${launchDir}/moqc_out"
        }
    }

    genomics2 {
        process.executor = 'local'
        singularity.enabled = true
        singularity.autoMounts = true 
        max_cpus=64
        max_memory=600.GB
        params {
            krakendbs="/fast/shared/krakenuniq/coral_genomes,/fast/shared/krakenuniq/symbiont_genomes,/fast/shared/krakenuniq/euk_genomes,/fast/shared/krakenuniq/coral_transcriptomes,/fast/shared/krakenuniq/symbiont_transcriptomes,/fast/shared/krakenuniq/kraken_standard"
            outdir="${launchDir}/moqc_out"
        }
    }

}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}